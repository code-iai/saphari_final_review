# USE THE CATKIN CMAKELISTS FOR BUILDING WITH CATKIN
# ELSE PROCEED WITH ROSBUILD BELOW
if(NOT USE_ROSBUILD)
  include(catkin.cmake)
  return()
endif()

cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
rosbuild_find_ros_package(saphari_msgs)
rosbuild_find_ros_package(geometry_msgs)

find_package(OpenNI)

find_package(OpenGL)
include_directories(${OPENGL_INCLUDE_DIR})

find_package(OpenCV REQUIRED)

if( OpenCV_FOUND )
    include_directories( ${OpenCV_INCLUDE_DIRS} )
endif( OpenCV_FOUND )

rosbuild_add_boost_directories()

include(FindPkgConfig)
pkg_check_modules(OPENNI libopenni)

include_directories(${OPENNI_INCLUDEDIR} /usr/include/nite)

rosbuild_add_library (kinect_driver src/driver.cpp src/user_tracker.cpp)
target_link_libraries (kinect_driver OpenNI ${OpenCV_LIBS})

rosbuild_add_executable (kinect_driver_node src/kinect_node.cpp)
target_link_libraries (kinect_driver_node kinect_driver)

#rosbuild_add_executable (calibration src/kinect_calibration.cpp)
#target_link_libraries (calibration OpenNI ${OpenCV_LIBRARIES} -lglut)

#rosbuild_add_executable (calib src/calibration.cpp)
#target_link_libraries (calib OpenNI ${OpenCV_LIBRARIES} -lglut)

#rosbuild_add_executable (calib src/calib.cpp)
#target_link_libraries (calib OpenNI ${OpenCV_LIBRARIES} -lglut -lGL)

rosbuild_add_library (kinect_nodelet src/kinect_nodelet.cpp)
target_link_libraries (kinect_nodelet kinect_driver)

